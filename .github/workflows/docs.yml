name: Deploy MkDocs Documentation

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - '.nojekyll'
      - '.github/workflows/docs.yml'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-docs.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs-material
          pip install pymdown-extensions
          pip install mkdocs-minify-plugin
          pip install mkdocs-git-revision-date-localized-plugin

      - name: Configure Git user
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
      # Create custom MkDocs config that excludes workenv
      - name: Create custom config
        run: |
          # Make a copy of mkdocs.yml
          cp mkdocs.yml mkdocs.custom.yml
          # Add exclude patterns
          echo "exclude_patterns: [workenv/*, '*/__pycache__/*']" >> mkdocs.custom.yml
          cat mkdocs.custom.yml
          
      - name: Build documentation
        run: |
          # Clean any previous build
          rm -rf site || true
          # Build the site with custom config
          mkdocs build --verbose --config-file mkdocs.custom.yml
          
      - name: Verify assets
        run: |
          echo "Checking assets directory..."
          ls -la site/assets/
          echo "Checking logo file specifically..."
          ls -la site/assets/logo.png || echo "Logo file not found"
          file site/assets/logo.png || echo "Logo file not found or invalid"
          
      - name: Ensure .nojekyll exists
        run: |
          # Make sure .nojekyll exists in the site directory
          touch site/.nojekyll
          echo "Created .nojekyll file in the build directory"
          ls -la site/
          
      - name: Remove any virtual environment references
        run: |
          # Remove workenv directory if it somehow got copied
          rm -rf site/workenv/ || true
          find site -name "__pycache__" -type d -exec rm -rf {} +  || true
      
      - name: Ensure assets are properly handled
        run: |
          # Make sure the assets directory is properly included
          echo "Checking if assets directory exists..."
          if [ ! -d "site/assets" ]; then
            echo "Creating assets directory..."
            mkdir -p site/assets
          fi
          
          # Verify the logo is in place
          echo "Checking if logo exists..."
          if [ ! -f "site/assets/logo.png" ]; then
            echo "Copying logo from docs/assets to site/assets..."
            cp docs/assets/logo.png site/assets/logo.png
          fi
          
          # Verify the favicon is in place
          echo "Checking if favicon exists..."
          if [ ! -f "site/assets/favicon.png" ]; then
            echo "Copying favicon from docs/assets to site/assets..."
            cp docs/assets/favicon.png site/assets/favicon.png
          fi
          
          # List contents of assets directory
          ls -la site/assets/
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      # Use only one artifact upload step
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site
          name: github-pages
          
  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
